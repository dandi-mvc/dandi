import { PartialObserver, Subscription } from 'rxjs'

import { InjectionToken } from './injection-token'
import { localOpinionatedToken } from './local-token'
import { LogEntry } from './log-entry'

/**
 * An object tracking the stream of [[LogEntry]] objects generated by [[Logger]] instances
 */
export interface LogStream {

  /**
   * Publishes a [[LogEntry]] to the stream
   * @param value
   */
  next(value: LogEntry): void

  /**
   * Creates a `Subscription` to be notified of new [[LogEntry]] objects published to the stream.
   * @param observer
   */
  subscribe(observer?: PartialObserver<LogEntry>): Subscription

  /**
   * Creates a `Subscription` to be notified of new [[LogEntry]] objects published to the stream.
   * @param next
   * @param error
   * @param complete
   */
  subscribe(next?: (value: LogEntry) => void, error?: (error: any) => void, complete?: () => void): Subscription
}

export const LogStream: InjectionToken<LogStream> = localOpinionatedToken('LogStream', {
  singleton: true,
  multi: false,
})
